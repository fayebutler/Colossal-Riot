#ifndef NGLDRAW_H__
#define NGLDRAW_H__

//----------------------------------------------------------------------------------------------------------------------
/// @file NGLDraw.h
/// @class NGLDraw "include/NGLDraw.h"
/// @brief Controls drawing and updating all entities in the game and any UI elements
/// @author Jon Macey, Will Herbert
/// @version 1.0
/// @date Last revision 10/05/2015 Updated to comply with doxygen and NCCA coding standard
//----------------------------------------------------------------------------------------------------------------------

#include <ngl/Camera.h>
#include <ngl/Light.h>
#include <SDL.h>
#include "GameWorld.h"
#include "Vehicle.h"
#include "Police.h"
#include "Rioter.h"
#include "UIButton.h"
#include "UISlider.h"
#include "Text.h"
#include "Timer.h"
#include <ngl/SpotLight.h>
#include "EntityManager.h"

//----------------------------------------------------------------------------------------------------------------------
/// @brief enum to describe the state of the game
//----------------------------------------------------------------------------------------------------------------------
enum eGameState
{
  gameMenu,
  gamePlay,
  gamePause,
  gameLose,
  gameWin,
  gameQuit
};

class NGLDraw
{
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
  //----------------------------------------------------------------------------------------------------------------------
  NGLDraw();
  NGLDraw(int _width, int _height);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor used to remove any NGL stuff created
  //----------------------------------------------------------------------------------------------------------------------
  ~NGLDraw();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief resize our screen and set the camera aspect ratio
  /// @param[in] _w the new width
  /// @param[in] _h the new height
  //----------------------------------------------------------------------------------------------------------------------
  void resize(int _w, int _h);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief starts a new level by contructing new GameWorld with level specified by buttons
  /// @param[in] _level the integer ID of the level to load
  //----------------------------------------------------------------------------------------------------------------------
  void startGame(int _level);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ends the current level by calling destructors and resetting the timer
  //----------------------------------------------------------------------------------------------------------------------
  void endGame();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief draw the scene
  //----------------------------------------------------------------------------------------------------------------------
  void draw();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief update the scene
  /// @param _timeElapsed the time elapsed between each frame
  /// @param _currentTime the current time of the current level
  //----------------------------------------------------------------------------------------------------------------------
  void update(double _timeElapsed, double _currentTime);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the SDL mouse event structure containing all mouse info
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse button is presses
  /// @param _event the SDL mouse event structure containing all mouse info
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent (const SDL_MouseButtonEvent &_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// @param _event the SDL mouse event structure containing all mouse info
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse wheel is moved
  /// @param _event the SDL mouse event structure containing all mouse info
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent(const SDL_MouseWheelEvent &_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief selectes a squad using colour differences, if there is a valid squad icon below the cursor
  /// @param[in] _x the x screen position of the mouse
  /// @param[in] _Y the y screen position of the mouse
  //----------------------------------------------------------------------------------------------------------------------
  void doSelection(const int _x, const int _y);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets a taget location for the currently selected squad, if there is one
  /// @param[in] _x the x screen position of the mouse
  /// @param[in] _y the y screen position of the mouse
  //----------------------------------------------------------------------------------------------------------------------
  void doMovement(const int _x, const int _y);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a method to convert the screen coordinates of the mouse click to world coordinates
  /// @param[in] _x the x screen position of the mouse
  /// @param[in] _y the y screen position of the mouse
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 getWorldSpace(const int _x, const int _y);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialises all of the buttons, sliders and text to be used in the user interface and menu
  //----------------------------------------------------------------------------------------------------------------------
  void initialiseUI();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief gets the current game state
  /// @return eGameState returns the current game state enum value
  //----------------------------------------------------------------------------------------------------------------------
  eGameState getGameState() const { return m_gameState; }
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the current game state
  /// @param[in] _gameState the enum state to set the game to
  //----------------------------------------------------------------------------------------------------------------------
  void setGameState(const eGameState _gameState){m_gameState = _gameState;}

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to load transform data to the shaders
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the Right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  ngl::Camera *m_camOrth;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a simple light use to illuminate the screen
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Light *m_light;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a simple spot light used to create the the effect of a light from a helicopter
  //----------------------------------------------------------------------------------------------------------------------
  ngl::SpotLight m_spot;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a NGL transformation tool
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Transformation m_trans;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the game world for all entities to be created in
  //----------------------------------------------------------------------------------------------------------------------
  GameWorld* m_gameworld;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the current state of the game
  //----------------------------------------------------------------------------------------------------------------------
  eGameState m_gameState;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the entity manager, used to access multiple enitites
  //----------------------------------------------------------------------------------------------------------------------
  EntityManager* m_entityMgr;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the timer that contains the current time and time elapsed between each tick
  //----------------------------------------------------------------------------------------------------------------------
  Timer m_gameTimer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief booleon to determin if a squad has been selected or not
  //----------------------------------------------------------------------------------------------------------------------
  bool m_selected;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the currently selected squad
  //----------------------------------------------------------------------------------------------------------------------
  Squad* m_selectedSquad;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the ID of the currently selected squad
  //----------------------------------------------------------------------------------------------------------------------
  int m_selectedSquadID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the position of the mouse click in world space
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_clickPosition;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the current squad's current colour
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_squadCurrentColour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the colour used to represent a squad in the patrol state, and the colour of the patrol button
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_patrolColour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the colour used to represent a squad in the defensive state, and the colour of the defensive button
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_defensiveColour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the colour used to represent a squad in the aggressive state, and the colour of the aggressive button
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_aggressiveColour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the colour used to represend a squad in the wall state, and the colour of the wall button
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_wallColour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the text class used to display all small text in the UI
  //----------------------------------------------------------------------------------------------------------------------
  Text* m_textSmall;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the text class used to display all medium text in the UI
  //----------------------------------------------------------------------------------------------------------------------
  Text* m_textMedium;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the text class used to display all large text in the UI
  //----------------------------------------------------------------------------------------------------------------------
  Text* m_textLarge;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a vector containing all buttons in the UI, allowing for checking against mouse clicks
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<UIButton*> m_buttons;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to start a new level
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonPlay;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to toggle the level to start level 1
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonLevel1;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to toggle the level to start level 2
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonLevel2;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to toggle the level to start level 3
  //---------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonLevel3;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to toggle the level to start level 4
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonLevel4;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to toggle the level to start level 5
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonLevel5;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief an integer holding the currently selected level to start
  //----------------------------------------------------------------------------------------------------------------------
  int m_selectedLevel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to quit the game
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonQuit;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to pause the game
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonPause;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used to return to the menu
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonMenu;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used in game to create a new squad
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonCreateSquad;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used in game to set the squad state to patrol
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonSquadPatrol;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used in game to set the squad state to aggressive
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonSquadAggressive;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used in game to set the squad state to defensive
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonSquadDefensive;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button that is used in game to set the squad state to wall
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonSquadWall;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button to represent the amount of rioters that have been killed
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonRioterDeadBar;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a button to respresent the amount of rioters that have gone home and left the map
  //----------------------------------------------------------------------------------------------------------------------
  UIButton* m_buttonRioterHomeBar;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slider used to control the number of policemen to assign to the next spawned squad
  //----------------------------------------------------------------------------------------------------------------------
  UISlider* m_sliderSquadSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the size of the squad to be spawned when the create squad button is clicked
  //----------------------------------------------------------------------------------------------------------------------
  int m_squadSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a conversion of the size of squad to be spawn to a string used for displaying in the UI
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_squadSizeString;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a string stream used for conversion throughout NGLDraw
  //----------------------------------------------------------------------------------------------------------------------
  std::stringstream m_ss;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the width of the window
  //----------------------------------------------------------------------------------------------------------------------
  float m_width;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the height of the window
  //----------------------------------------------------------------------------------------------------------------------
  float m_height;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the longest side of the screen, used for zooming correctly
  //----------------------------------------------------------------------------------------------------------------------
  float m_longestSide;
};


#endif
