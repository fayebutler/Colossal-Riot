<map id="G" name="G">
<area shape="rect" id="node28" href="$class_state_machine.html" title="{StateMachine\&lt; Police \&gt;\n|&#45; m_owner\l&#45; m_currentState\l&#45; m_previousState\l&#45; m_globalState\l&#45; L\l|+ StateMachine()\l+ ~StateMachine()\l+ setCurrentState()\l+ getCurrentState()\l+ setPreviousState()\l+ getPreviousState()\l+ setGlobalState()\l+ getGlobalState()\l+ update()\l+ luaCallState()\l+ changeState()\l+ registerLua()\l}" alt="" coords="153,7089,340,7434"/>
<area shape="rect" id="node2" href="$class_agent.html" title="The base class for all agents, that can be rioters or police." alt="" coords="399,4851,572,5821"/>
<area shape="rect" id="node4" href="$class_vehicle.html" title="The base class for all vehicles." alt="" coords="275,3704,445,4275"/>
<area shape="rect" id="node22" href="$class_steering_behaviour.html" title="{SteeringBehaviour\n|&#45; m_entityMgr\l&#45; m_vehicle\l&#45; m_activeFlags\l&#45; m_steeringForce\l&#45; m_targetAgent\l&#45; m_wanderDistance\l&#45; m_wanderRadius\l&#45; m_wanderJitter\l&#45; m_deceleration\l&#45; m_wanderTarget\l&#45; m_friendlyNeighbours\l&#45; m_allNeighbours\l&#45; m_weightSeek\l&#45; m_weightFlee\l&#45; m_weightArrive\l&#45; m_weightWander\l&#45; m_weightCohesion\l&#45; m_weightSeparation\l&#45; m_weightAlignment\l&#45; m_weightObstacleAvoidance\l&#45; m_weightWallAvoidance\l&#45; m_weightPursuit\l&#45; m_weightEvade\l&#45; m_weightSquadCohesion\l|+ SteeringBehaviour()\l+ ~SteeringBehaviour()\l+ SeekOn()\l+ SeekOff()\l+ isSeekOn()\l+ setSeekWeight()\l+ getSeekWeight()\l+ FleeOn()\l+ FleeOff()\l+ isFleeOn()\l+ setFleeWeight()\l+ getFleeWeight()\l+ ArriveOn()\l+ ArriveOff()\l+ isArriveOn()\l+ setArriveWeight()\l+ getArriveWeight()\l+ WanderOn()\l+ WanderOff()\l+ isWanderOn()\l+ setWanderWeight()\l+ getWanderWeight()\l+ SeparationOn()\l+ SeparationOff()\l+ isSeparationOn()\l+ setSeparationWeight()\l+ getSeparationWeight()\l+ AlignmentOn()\l+ AlignmentOff()\l+ isAlignmentOn()\l+ setAlignmentWeight()\l+ getAlignmentWeight()\l+ CohesionOn()\l+ CohesionOff()\l+ isCohesionOn()\l+ setCohesionWeight()\l+ getCohesionWeight()\l+ SquadCohesionOn()\l+ SquadCohesionOff()\l+ isSquadCohesionOn()\l+ setSquadCohesionWeight()\l+ getSquadCohesionWeight()\l+ PursuitOn()\l+ PursuitOff()\l+ isPursuitOn()\l+ setPursuitWeight()\l+ getPursuitWeight()\l+ EvadeOn()\l+ EvadeOff()\l+ isEvadeOn()\l+ setEvadeWeight()\l+ getEvadeWeight()\l+ ObstacleAvoidOn()\l+ ObstacleAvoidOff()\l+ isObstacleAvoidOn()\l+ setObstacleAvoidWeight()\l+ getObstacleAvoidWeight()\l+ WallAvoidOn()\l+ WallAvoidOff()\l+ isWallAvoidOn()\l+ setWallAvoidWeight()\l+ getWallAvoidWeight()\l+ setTargetAgent()\l+ addFriendlyNeighbours()\l+ clearFriendlyNeighbours()\l+ addAllNeighbours()\l+ clearAllNeighbours()\l+ lineIntersection2D()\l+ calculatePrioritizedSum()\l+ accumulateForce()\l+ ObjectOverlapAvoidance()\l+ WallOverlapAvoidance()\l&#45; on()\l&#45; Seek()\l&#45; Flee()\l&#45; Arrive()\l&#45; Wander()\l&#45; Pursuit()\l&#45; Evade()\l&#45; Separation()\l&#45; Alignment()\l&#45; Cohesion()\l&#45; SquadCohesion()\l&#45; ObstacleAvoidance()\l&#45; WallAvoidance()\l&#45; worldToLocalSpace()\l}" alt="" coords="144,4357,371,6315"/>
<area shape="rect" id="node6" href="$class_moving_entity.html" title="{MovingEntity\n|# m_velocity\l# m_maxSpeed\l# m_heading\l# m_mass\l# m_maxTurnRate\l# m_maxForce\l# m_side\l|+ MovingEntity()\l+ getVelocity()\l+ setVelocity()\l+ getHeading()\l+ setHeading()\l+ getSide()\l+ getMass()\l+ setMass()\l+ getMaxSpeed()\l+ setMaxSpeed()\l+ getMaxForce()\l+ setMaxForce()\l+ getMaxTurnRate()\l+ setMaxTurnRate()\l+ getSpeed()\l+ handleMessage()\l}" alt="" coords="400,3203,557,3653"/>
<area shape="rect" id="node8" href="$class_base_game_entity.html" title="The base class for all entities in the game, static or moving." alt="" coords="388,2355,649,3151"/>
<area shape="rect" id="node10" href="$class_cell.html" title="{Cell\n|&#45; m_ID\l&#45; m_centre\l&#45; m_fourCorners\l&#45; m_boundries\l&#45; m_dynamicEntityIDs\l&#45; m_neighbourCellIDs\l&#45; m_perpendicularNeighbourCellIDs\l&#45; m_walls\l&#45; m_wallsInCell\l|+ Cell()\l+ Cell()\l+ ~Cell()\l+ getID()\l+ getCentre()\l+ getBoundaries()\l+ getSize()\l+ addDynamicEntityID()\l+ getDynamicEntityIDs()\l+ clearDynamicEntityIDs()\l+ addPerpendicularNeighbourID()\l+ getNeighbourCellIDs()\l+ getPerpendicularNeighbourCellIDs()\l+ addWall()\l+ addWallInCell()\l+ getWalls()\l+ getWallsInCell()\l}" alt="" coords="381,1327,656,1828"/>
<area shape="rect" id="node12" href="$class_entity_manager.html" title="A manager monostate class that stores all base game entities with a corresponding..." alt="" coords="177,6,337,213"/>
<area shape="rect" id="node14" href="$class_game_world.html" title="The class that creates the world an encompasses all base game entities." alt="" coords="88,867,357,2287"/>
<area shape="rect" id="node16" href="$class_cell_graph.html" title="{CellGraph\n|&#45; m_entityMgr\l&#45; m_cells\l&#45; m_exitPoints\l&#45; m_mapBounds\l&#45; m_numberOfCells\l&#45; m_cellSize\l&#45; m_maxDist\l&#45; m_wallCentres\l&#45; m_wallNormals\l&#45; m_wallRotations\l|+ CellGraph()\l+ CellGraph()\l+ ~CellGraph()\l+ initializeCells()\l+ updateCells()\l+ clearCells()\l+ addEntities()\l+ entityIsInCell()\l+ posIsInCell()\l+ printCellGraph()\l+ generateWalls()\l+ getMapBounds()\l+ getExitPoints()\l+ findPath()\l+ getWallCentres()\l+ getWallNormals()\l+ getWallRotations()\l}" alt="" coords="109,281,269,799"/>
<area shape="rect" id="node20" href="$class_message_manager.html" title="A manager monostate class that helps handle the sending and receiving of messages..." alt="" coords="680,1509,853,1646"/>
<area shape="rect" id="node26" href="$class_timer.html" title="A monostate class that contains all the time information to be used throughout the..." alt="" coords="469,3886,661,4093"/>
<area shape="rect" id="node31" href="$class_state_machine.html" title="Templated scripted FSM to make agent decisions linked using LuaBridge." alt="" coords="5,6529,224,6874"/>
</map>
